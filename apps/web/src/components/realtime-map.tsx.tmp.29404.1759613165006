'use client'

import { Bus, MapPin } from 'lucide-react'
import { useEffect, useId, useMemo, useState, useCallback } from 'react'
import MapGL, { Layer, Source, Marker } from 'react-map-gl/maplibre'
import type { RouteCoordinate } from '@/lib/route-service'
import { useVehiclePositions } from '@/hooks/use-vehicle-positions'

export default function RealtimeMap() {
  const { vehicles, loading } = useVehiclePositions()
  const [error, setError] = useState<string | null>(null)
  const [shapes, setShapes] = useState<{
    type: 'FeatureCollection'
    features: Array<{
      type: 'Feature'
      geometry: { type: 'LineString'; coordinates: [number, number][] }
      properties: { mode: 'bus' | 'tram'; shape_id: string }
    }>
  } | null>(null)
  const [showBus, setShowBus] = useState(true)
  const [showTram, setShowTram] = useState(true)
  const [viewState, setViewState] = useState({
    longitude: 19.9383, // Krak√≥w center
    latitude: 50.0614,
    zoom: 12,
  })

  // Route planning state
  const [routeOrigin, setRouteOrigin] = useState<RouteCoordinate | null>(null)
  const [routeDestination, setRouteDestination] = useState<RouteCoordinate | null>(null)
  const [routeData, setRouteData] = useState<any>(null)
  const [isSelecting, setIsSelecting] = useState(false)

  // MapLibre style URL - using a CORS-compliant style
  const mapStyle =
    'https://basemaps.cartocdn.com/gl/positron-gl-style/style.json'

  const rid = useId()
  const sourceId = useMemo(() => `vehicles-${rid.replace(/[:]/g, '')}`, [rid])
  const layerId = useMemo(
    () => `vehicle-points-${rid.replace(/[:]/g, '')}`,
    [rid],
  )
  const labelsLayerId = useMemo(
    () => `vehicle-labels-${rid.replace(/[:]/g, '')}`,
    [rid],
  )
  const shapesSourceId = useMemo(
    () => `shapes-${rid.replace(/[:]/g, '')}`,
    [rid],
  )
  const routesLayerId = useMemo(
    () => `routes-lines-${rid.replace(/[:]/g, '')}`,
    [rid],
  )

  // Handle route planning interactions
  const handleMapClick = useCallback((event: any) => {
    if (!isSelecting) return

    const coords: RouteCoordinate = {
      lat: event.lngLat.lat,
      lng: event.lngLat.lng
    }

    // Dispatch custom event for route navigation component
    window.dispatchEvent(new CustomEvent('mapClick', { detail: coords }))
  }, [isSelecting])

  const centerMap = useCallback((coords: RouteCoordinate) => {
    setViewState({
      longitude: coords.lng,
      latitude: coords.lat,
      zoom: 14
    })
  }, [])

  const showRoute = useCallback((data: any) => {
    setRouteOrigin(data.origin)
    setRouteDestination(data.destination)
    setRouteData(data.routeData)
  }, [])

  const clearRoute = useCallback(() => {
    setRouteOrigin(null)
    setRouteDestination(null)
    setRouteData(null)
    setIsSelecting(false)
  }, [])

  const vehicleGeoJSON = useMemo(
    () => ({
      type: 'FeatureCollection' as const,
      features: vehicles.map((v) => ({
        type: 'Feature' as const,
        geometry: {
          type: 'Point' as const,
          coordinates: [v.longitude, v.latitude],
        },
        properties: {
          id: v.vehicleId,
          bearing: v.bearing,
          routeId: v.routeId,
          vehicleId: v.vehicleId,
          routeShortName: v.routeNumber,
          routeLongName: v.routeNumber,
          mode: v.mode.toLowerCase(),
        },
      })),
    }),
    [vehicles],
  )

  // Route planning event listeners
  useEffect(() => {
    const handleStartSelection = (event: CustomEvent) => {
      setIsSelecting(true)
    }

    const handleCenterMap = (event: CustomEvent) => {
      centerMap(event.detail)
    }

    const handleShowRoute = (event: CustomEvent) => {
      showRoute(event.detail)
      setIsSelecting(false)
    }

    const handleClearRoute = () => {
      clearRoute()
    }

    window.addEventListener('startRouteSelection', handleStartSelection as EventListener)
    window.addEventListener('centerMap', handleCenterMap as EventListener)
    window.addEventListener('showRoute', handleShowRoute as EventListener)
    window.addEventListener('clearRoute', handleClearRoute as EventListener)

    return () => {
      window.removeEventListener('startRouteSelection', handleStartSelection as EventListener)
      window.removeEventListener('centerMap', handleCenterMap as EventListener)
      window.removeEventListener('showRoute', handleShowRoute as EventListener)
      window.removeEventListener('clearRoute', handleClearRoute as EventListener)
    }
  }, [centerMap, showRoute, clearRoute])

  // Fetch static shapes (bus + tram lines) - still use API for this
  useEffect(() => {
    const fetchShapes = async () => {
      try {
        const res = await fetch('/api/gtfs/shapes')
        if (res.ok) {
          const data = (await res.json()) as typeof shapes
          setShapes(data)
        }
      } catch (err) {
        console.error('Error fetching GTFS shapes:', err)
      }
    }
    fetchShapes()
  }, [])

  return (
    <div className="w-full h-screen relative">
      {loading && (
        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
          <div className="text-white text-lg">Loading vehicle positions...</div>
        </div>
      )}

      {error && (
        <div className="absolute top-4 left-4 bg-red-500 text-white p-3 rounded-md z-10">
          <div>{error}</div>
        </div>
      )}

      <div className="absolute top-4 right-4 bg-white bg-opacity-90 p-3 rounded-md z-10 shadow-lg">
        <div className="flex items-center gap-2 text-sm">
          <Bus className="w-4 h-4 text-blue-500" />
          <div>
            <div className="font-medium">Vehicles: {vehicles.length}</div>
            <div className="text-xs text-gray-600">
              Last updated: {new Date().toLocaleTimeString()}
            </div>
          </div>
        </div>
        <div className="mt-2 flex items-center gap-3 text-xs">
          <label className="flex items-center gap-1 cursor-pointer">
            <input
              type="checkbox"
              checked={showBus}
              onChange={(e) => setShowBus(e.target.checked)}
            />
            <span className="inline-flex items-center gap-1">
              <span className="inline-block w-3 h-1 bg-blue-600" />
              Bus
            </span>
          </label>
          <label className="flex items-center gap-1 cursor-pointer">
            <input
              type="checkbox"
              checked={showTram}
              onChange={(e) => setShowTram(e.target.checked)}
            />
            <span className="inline-flex items-center gap-1">
              <span className="inline-block w-3 h-1 bg-emerald-600" />
              Tram
            </span>
          </label>
        </div>
      </div>

      <MapGL
        {...viewState}
        onMove={(evt) => setViewState(evt.viewState)}
        onClick={handleMapClick}
        mapStyle={mapStyle}
        style={{ width: '100%', height: '100%' }}
        cursor={isSelecting ? 'crosshair' : 'grab'}
      >
        {vehicleGeoJSON.features.length > 0 && (
          <Source id={sourceId} type="geojson" data={vehicleGeoJSON}>
            <Layer
              id={layerId}
              type="circle"
              paint={{
                'circle-radius': [
                  'interpolate',
                  ['linear'],
                  ['zoom'],
                  10,
                  4,
                  14,
                  8,
                ],
                'circle-color': [
                  'match',
                  ['get', 'mode'],
                  'tram',
                  '#059669',
                  'bus',
                  '#2563eb',
                  /* other */ '#999999',
                ],
                'circle-stroke-width': 2,
                'circle-stroke-color': '#ffffff',
              }}
            />
            <Layer
              id={labelsLayerId}
              type="symbol"
              layout={{
                'text-field': ['get', 'routeShortName'],
                'text-font': ['Open Sans Regular'],
                'text-size': 12,
                'text-anchor': 'bottom',
                'text-offset': [0, -1.5],
                'text-allow-overlap': false,
                'text-optional': true,
              }}
              paint={{
                'text-color': '#1f2937',
                'text-halo-color': '#ffffff',
                'text-halo-width': 2,
                'text-opacity': [
                  'interpolate',
                  ['linear'],
                  ['zoom'],
                  10,
                  0,
                  11,
                  0.7,
                  14,
                  1,
                ],
              }}
            />
          </Source>
        )}

        {shapes && (
          <Source id={shapesSourceId} type="geojson" data={shapes}>
            <Layer
              id={routesLayerId}
              type="line"
              paint={{
                'line-color': [
                  'match',
                  ['get', 'mode'],
                  'tram',
                  '#059669',
                  'bus',
                  '#2563eb',
                  '#999999',
                ],
                'line-width': [
                  'interpolate',
                  ['linear'],
                  ['zoom'],
                  10,
                  1,
                  13,
                  2.25,
                  16,
                  3.5,
                ],
                'line-opacity': [
                  'case',
                  ['==', ['get', 'mode'], 'bus'],
                  showBus ? 0.7 : 0,
                  ['==', ['get', 'mode'], 'tram'],
                  showTram ? 0.75 : 0,
                  0,
                ],
              }}
              layout={{ 'line-cap': 'round', 'line-join': 'round' }}
            />
          </Source>
        )}

        {/* Route Markers */}
        {routeOrigin && (
          <Marker longitude={routeOrigin.lng} latitude={routeOrigin.lat}>
            <div className="flex flex-col items-center">
              <div className="w-8 h-8 bg-green-500 rounded-full border-2 border-white shadow-lg flex items-center justify-center">
                <MapPin className="w-4 h-4 text-white" />
              </div>
              <span className="bg-green-500 text-white text-xs px-1 rounded mt-1 shadow">Origin</span>
            </div>
          </Marker>
        )}

        {routeDestination && (
          <Marker longitude={routeDestination.lng} latitude={routeDestination.lat}>
            <div className="flex flex-col items-center">
              <div className="w-8 h-8 bg-red-500 rounded-full border-2 border-white shadow-lg flex items-center justify-center">
                <MapPin className="w-4 h-4 text-white" />
              </div>
              <span className="bg-red-500 text-white text-xs px-1 rounded mt-1 shadow">Destination</span>
            </div>
          </Marker>
        )}

        {/* Route Lines */}
        {routeData?.routes?.[0]?.sections && (
          routeData.routes[0].sections
            .filter(section => section.geometry && section.geometry.length > 0)
            .map((section, index) => {
              const coordinates = section.geometry.map(coord => [coord.lng, coord.lat])
              return (
                <Source
                  key={section.id || index}
                  type="geojson"
                  data={{
                    type: 'Feature',
                    geometry: {
                      type: 'LineString',
                      coordinates
                    }
                  }}
                >
                  <Layer
                    type="line"
                    paint={{
                      'line-color': '#3b82f6',
                      'line-width': 5,
                      'line-opacity': 0.8
                    }}
                  />
                </Source>
              )
            })
        )}
      </MapGL>
    </div>
  )
}
